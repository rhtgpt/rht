CREATE TABLE GD.CIM_OFM_SMG3_LOGGING_NEW (
    TRACE_ID              VARCHAR2(36 BYTE),
    ALIAS                 VARCHAR2(16 BYTE),
    AUDIT_CREATE_DATE     TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
    TRACE_HASH            GENERATED ALWAYS AS (MOD(ORA_HASH(TRACE_ID), 3)) VIRTUAL,
    SMG3_LOGGING_DATA     CLOB,
    FILTRATION_JSON_DATA  CLOB
)
PARTITION BY RANGE (AUDIT_CREATE_DATE)
SUBPARTITION BY LIST (TRACE_HASH)
(
    PARTITION p0 VALUES LESS THAN (TIMESTAMP '2025-06-17 00:00:00')
    (
        SUBPARTITION sp0_p0 VALUES (0)
            LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_05),
            LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_05),

        SUBPARTITION sp1_p0 VALUES (1)
            LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_06),
            LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_06),

        SUBPARTITION sp2_p0 VALUES (2)
            LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_07),
            LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_07)
    )
)
COMPRESS FOR OLTP;



CREATE TABLE PRODUCT (
    PRODUCT_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PRODUCT_NAME     VARCHAR2(100) NOT NULL,
    DESCRIPTION      VARCHAR2(500),
    CATEGORY         VARCHAR2(50),
    PRICE            NUMBER(10, 2) NOT NULL,
    STOCK_QUANTITY   NUMBER DEFAULT 0,
    CREATED_AT       TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_AT       TIMESTAMP
);

INSERT INTO GD.CIM_OPM_SMG3_LOGGING_NEW (
    TRACE_ID,
    ALIAS,
    AUDIT_CREATE_DATE,
    SMG3_LOGGING_DATA,
    FILTRATION_JSON_DATA
) VALUES (
    '123e4567-e89b-12d3-a456-426614174000',
    'SYSLOG',
    TO_TIMESTAMP('2025-06-17 10:15:00', 'YYYY-MM-DD HH24:MI:SS'),
    RPAD('{"log":"Sample logging data"}', 50000, '*'),  -- ~50KB CLOB
    RPAD('{"filter":"This is a filtration data example."}', 60000, '#') -- ~60KB CLOB
);

DROP TABLE GD.CIM_OPM_SMG3_LOGGING_NEW PURGE;

CREATE TABLE GD.CIM_OFM_SMG3_LOGGING_NEW (
    TRACE_ID              VARCHAR2(36 BYTE),
    ALIAS                 VARCHAR2(16 BYTE),
    AUDIT_CREATE_DATE     TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
    TRACE_HASH            GENERATED ALWAYS AS (MOD(ORA_HASH(TRACE_ID), 3)) VIRTUAL,
    SMG3_LOGGING_DATA     CLOB,
    FILTRATION_JSON_DATA  CLOB
)
PARTITION BY RANGE (AUDIT_CREATE_DATE)
SUBPARTITION BY LIST (TRACE_HASH)
(
    PARTITION p_before_today VALUES LESS THAN (TIMESTAMP '2025-06-27 00:00:00')
    (
        SUBPARTITION sp0_b VALUES (0)
            LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_05),
            LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_05),

        SUBPARTITION sp1_b VALUES (1)
            LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_06),
            LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_06),

        SUBPARTITION sp2_b VALUES (2)
            LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_07),
            LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_07)
    ),
    PARTITION p_today_and_future VALUES LESS THAN (TIMESTAMP '9999-12-31 00:00:00')
    (
        SUBPARTITION sp0_f VALUES (0)
            LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_05),
            LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_05),

        SUBPARTITION sp1_f VALUES (1)
            LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_06),
            LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_06),

        SUBPARTITION sp2_f VALUES (2)
            LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_07),
            LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_07)
    )
)
COMPRESS FOR OLTP;

CREATE TABLE GD.CIM_OFM_SMG3_LOGGING_NEW (
    TRACE_ID              VARCHAR2(36 BYTE),
    ALIAS                 VARCHAR2(16 BYTE),
    AUDIT_CREATE_DATE     TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
    TRACE_HASH            GENERATED ALWAYS AS (MOD(ORA_HASH(TRACE_ID), 3)) VIRTUAL,
    SMG3_LOGGING_DATA     CLOB,
    FILTRATION_JSON_DATA  CLOB
)
PARTITION BY LIST (TRACE_HASH)
(
    PARTITION p_hash_0 VALUES (0)
        LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_05),
        LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_05),

    PARTITION p_hash_1 VALUES (1)
        LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_06),
        LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_06),

    PARTITION p_hash_2 VALUES (2)
        LOB (SMG3_LOGGING_DATA) STORE AS (TABLESPACE GD_LOB_07),
        LOB (FILTRATION_JSON_DATA) STORE AS (TABLESPACE GD_LOB_07)
)
COMPRESS FOR OLTP;
SELECT
    PARTITION_NAME,
    COUNT(*) AS ROW_COUNT
FROM
    GD.CIM_OFM_SMG3_LOGGING_NEW PARTITION (p_hash_0)
UNION ALL
SELECT
    'p_hash_1',
    COUNT(*) FROM GD.CIM_OFM_SMG3_LOGGING_NEW PARTITION (p_hash_1)
UNION ALL
SELECT
    'p_hash_2',
    COUNT(*) FROM GD.CIM_OFM_SMG3_LOGGING_NEW PARTITION (p_hash_2);

SELECT
    t.table_name,
    p.partition_name,
    p.tablespace_name,
    p.num_rows
FROM
    all_tab_partitions p
JOIN
    all_tables t ON p.table_name = t.table_name
WHERE
    t.owner = 'GD'
    AND t.table_name = 'CIM_OFM_SMG3_LOGGING_NEW'
ORDER BY p.tablespace_name;


SELECT
    tablespace_name,
    ROUND(SUM(bytes) / 1024 / 1024, 2) AS size_mb
FROM
    dba_segments
WHERE
    segment_type IN ('LOBSEGMENT', 'LOB PARTITION')
    AND segment_name IN (
        SELECT column_name
        FROM all_lobs
        WHERE table_name = 'CIM_OFM_SMG3_LOGGING_NEW' AND owner = 'GD'
    )
    AND owner = 'GD'
GROUP BY
    tablespace_name
ORDER BY
    size_mb DESC;
===================================
SELECT
    'GD_LOB_05' AS tablespace,
    COUNT(*) AS row_count
FROM
    GD.CIM_OFM_SMG3_LOGGING_NEW PARTITION (p_hash_0)
UNION ALL
SELECT
    'GD_LOB_06',
    COUNT(*) FROM GD.CIM_OFM_SMG3_LOGGING_NEW PARTITION (p_hash_1)
UNION ALL
SELECT
    'GD_LOB_07',
    COUNT(*) FROM GD.CIM_OFM_SMG3_LOGGING_NEW PARTITION (p_hash_2);

